{"version":3,"sources":["components/TeaProduct/ListRow.tsx","routes/List.tsx"],"names":["getRandomStyle","rand","min","max","Math","random","left","top","size","ListRow","tea","useSearchParams","params","setParams","useMemo","slug","year","name","style","thumbnailUrl","dpg","forms","percentiles","detailSlug","get","classes","url","getImageUrl","imageStyle","width","height","className","onClick","detail","id","PercentileCircle","percentile","src","alt","List","teas","useRecoilValue","teasState","map","t"],"mappings":"8PAMMA,EAAiB,WACrB,IAAMC,EAAO,SAACC,EAAaC,GAAd,OAA8BC,KAAKC,UAAYF,EAAMD,GAAOA,GACnEI,EAAOL,EAAK,GAAI,IAChBM,EAAMN,EAAK,EAAG,IAEpB,MAAO,CAAEO,KADIP,EAAK,IAAK,KACRM,MAAKD,SAGTG,EAAU,SAAC,GAAkC,IAAD,IAA/BC,EAA+B,EAA/BA,IACxB,EAA4BC,cAA5B,mBAAOC,EAAP,KAAeC,EAAf,KACA,EAA4BC,kBAAQd,EAAgB,CAACU,EAAIK,OAAjDP,EAAR,EAAQA,KAAMD,EAAd,EAAcA,IAAKD,EAAnB,EAAmBA,KAEXU,EAAiDN,EAAjDM,KAAMC,EAA2CP,EAA3CO,KAAMF,EAAqCL,EAArCK,KAAMG,EAA+BR,EAA/BQ,MAAOC,EAAwBT,EAAxBS,aAC3BC,GAAM,UAD6CV,EAAVW,MAC7B,UAAN,mBAAUC,mBAAV,eAAuBF,MAAO,EACpCG,EAAaX,EAAOY,IAAI,UAQxBC,EAAO,mBADMF,IAAeR,EACO,gBAAkB,IACrDW,EAAMC,YAAYR,EAAcX,GAChCoB,EAAa,CACjBrB,IAAI,GAAD,OAAKA,EAAL,MACHD,KAAK,GAAD,OAAKA,EAAL,MACJuB,MAAM,GAAD,OAAKrB,EAAL,MACLsB,OAAO,GAAD,OAAKtB,EAAL,OAGR,OACE,sBAAKuB,UAAWN,EAASO,QAhBP,kBAClBnB,EAAU,CACRoB,OAAQlB,KAcqCmB,GAAInB,EAAnD,UACE,uBAAMgB,UAAU,OAAhB,UAAwBf,EAAxB,OACA,uBAAMe,UAAU,OAAhB,UAAwBd,EAAxB,OACA,uBAAMc,UAAU,MAAhB,UACG,IACD,cAACI,EAAA,EAAD,CAAkBC,WAAYhB,OAEhC,uBAAMW,UAAU,QAAhB,cAA0Bb,KAC1B,qBAAKmB,IAAKX,EAAKG,MAAOrB,EAAMsB,OAAQtB,EAAM8B,IAAKrB,EAAMC,MAAOU,QCzCrDW,G,OAAO,WAClB,IAAMC,EAAOC,YAAeC,KAE5B,OACE,qBAAKX,UAAU,OAAf,SACGS,EAAKG,KAAI,SAACC,GAAD,OACR,cAAC,EAAD,CAAsBlC,IAAKkC,GAAbA,EAAE7B,aAMTwB","file":"static/js/5.7dd5c83f.chunk.js","sourcesContent":["import { PercentileCircle } from \"components/Detail/PercentileCircle\";\nimport { useMemo } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { getImageUrl, TeaProduct } from \"types/TeaProduct\";\nimport \"./ListRow.scss\";\n\nconst getRandomStyle = () => {\n  const rand = (min: number, max: number) => Math.random() * (max - min) + min;\n  const left = rand(10, 80);\n  const top = rand(0, 60);\n  const size = rand(100, 400);\n  return { size, top, left };\n};\n\nexport const ListRow = ({ tea }: { tea: TeaProduct }) => {\n  const [params, setParams] = useSearchParams();\n  const { size, top, left } = useMemo(getRandomStyle, [tea.slug]);\n\n  const { year, name, slug, style, thumbnailUrl, forms } = tea;\n  const dpg = forms[0]?.percentiles?.dpg || 0;\n  const detailSlug = params.get(\"detail\");\n\n  const setSelected = () =>\n    setParams({\n      detail: slug,\n    });\n\n  const isSelected = detailSlug === slug;\n  const classes = `ListText ${isSelected ? \"selected glow\" : \"\"}`;\n  const url = getImageUrl(thumbnailUrl, size);\n  const imageStyle = {\n    top: `${top}vh`,\n    left: `${left}vw`,\n    width: `${size}px`,\n    height: `${size}px`,\n  };\n\n  return (\n    <div className={classes} onClick={setSelected} id={slug}>\n      <span className=\"year\">{year} </span>\n      <span className=\"name\">{name} </span>\n      <span className=\"dpg\">\n        {\" \"}\n        <PercentileCircle percentile={dpg} />\n      </span>\n      <span className=\"style\"> {style}</span>\n      <img src={url} width={size} height={size} alt={name} style={imageStyle} />\n    </div>\n  );\n};\n","import { useRecoilValue } from \"recoil\";\nimport { teasState } from \"states/teas\";\nimport { ListRow } from \"components/TeaProduct/ListRow\";\nimport \"./List.scss\";\n\nexport const List = () => {\n  const teas = useRecoilValue(teasState);\n\n  return (\n    <div className=\"List\">\n      {teas.map((t) => (\n        <ListRow key={t.slug} tea={t} />\n      ))}\n    </div>\n  );\n};\n\nexport default List;\n"],"sourceRoot":""}