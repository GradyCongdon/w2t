{"version":3,"sources":["components/Stats.tsx","components/TeaProduct/Card.tsx","routes/Cards.tsx"],"names":["Stat","style","name","size","total","showPercent","percent","style2","width","title","toFixed","isSmall","isReallySmall","text","Math","round","className","Stats","teas","useRecoilValue","teasState","styleGroups","groupBy","styles","Object","entries","sort","a","b","localeCompare","percentiles","map","t","dpg","forms","filter","undefined","pGroups","p","padStart","pGroupEntries","s","ts","length","k","xs","border","getScaleColor","tenX","color","getScaleTextColor","parseInt","Card","tea","subject","useSearchParams","params","setParams","detailSlug","get","year","slug","owned","imageUrl","images","IMAGE_SIZE","classes","onClick","detail","id","Image","src","getImageUrl","alt","height","Cards","useParams","$Teas"],"mappings":"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","file":"static/js/4.8724ef06.chunk.js","sourcesContent":["import { useRecoilValue } from \"recoil\";\nimport { teasState } from \"states/teas\";\nimport groupBy from \"lodash/fp/groupBy\";\nimport \"./Stats.scss\";\nimport { PercentileCircle } from \"./Detail/PercentileCircle\";\nimport { getScaleColor, getScaleTextColor } from \"utils/scale\";\n\nexport const Stat = ({\n  style = {},\n  name,\n  size,\n  total,\n  showPercent = true,\n}: any) => {\n  const percent = (size / total) * 100;\n  const style2 = {\n    ...style,\n    width: percent + \"%\",\n  };\n  const title = `${name} ${percent.toFixed(2)}% (${size}/${total})`;\n  const isSmall = percent < 10;\n  const isReallySmall = percent < 5;\n  const text =\n    isSmall || !showPercent ? name : `${name} ${Math.round(percent)}%`;\n  return (\n    <abbr\n      style={style2}\n      title={title}\n      className={`Stat Stat--${name} ${isSmall ? \"small\" : \"\"} ${\n        isReallySmall ? \"really-small\" : \"\"\n      } ${showPercent ? \"showPercent\" : \"noShowPercent\"}`}\n    >\n      <span className=\"StatText\">{text}</span>\n    </abbr>\n  );\n};\n\nexport const PercentileCount = ({\n  percentile,\n  count,\n}: {\n  percentile: number;\n  count: number;\n}) => (\n  <>\n    <PercentileCircle percentile={percentile} />\n    <span className=\"count\" style={{ color: getScaleTextColor(percentile) }}>\n      {count}\n    </span>\n  </>\n);\n\nexport const Stats = () => {\n  const teas = useRecoilValue(teasState);\n  const styleGroups = groupBy(\"style\", teas);\n  const styles = Object.entries(styleGroups).sort((a, b) =>\n    b[0].localeCompare(a[0])\n  );\n  const percentiles = teas\n    .map((t) => ({\n      name: t.name,\n      dpg: t.forms[0]?.percentiles?.dpg,\n    }))\n    .filter((t) => t.dpg !== undefined);\n  // .sort((a, b) => a.dpg - b.dpg);\n  const firstDigit = (p: any) => p.dpg.toFixed(0).padStart(2, \"0\")[0];\n  const pGroups = groupBy(firstDigit, percentiles);\n  const pGroupEntries = Object.entries(pGroups);\n\n  return (\n    <div className=\"Stats\">\n      <div className=\"StyleBars\">\n        {styles.map(([s, ts]) => (\n          <Stat key={s} name={s} size={ts.length} total={teas.length} />\n        ))}\n      </div>\n      <div className=\"PercentileList StyleBars\">\n        {pGroupEntries.map(([k, xs]) => (\n          // <abbr key={k} title={xs.map((x: any) => x.name).join(\"\\n\")}>\n          //   <PercentileCount percentile={tenX(k)} count={xs.length} />\n          // </abbr>\n          <Stat\n            key={k}\n            style={{\n              border: `2px solid ${getScaleColor(tenX(k))}`,\n              color: getScaleTextColor(tenX(k)),\n            }}\n            name={pLabel(k)}\n            size={xs.length}\n            total={percentiles.length}\n            showPercent={false}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\nfunction pLabel(p: string) {\n  // if (p === \"0\") return \"< 10\";\n  // if (p === \"9\") return \"90+\";\n  return tenX(p);\n}\n\nfunction tenX(k: string): number {\n  return parseInt(k, 10) * 10;\n}\n","import { getImageUrl, ImageSubject, TeaProduct } from \"types/TeaProduct\";\nimport { Image } from \"./Image\";\nimport \"./Card.scss\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { IMAGE_SIZE } from \"types/const\";\n\nexport type Props = {\n  tea: TeaProduct;\n  subject: ImageSubject;\n};\n\nexport const Card = ({ tea, subject }: Props) => {\n  const [params, setParams] = useSearchParams();\n  const detailSlug = params.get(\"detail\");\n\n  const { year, name, slug, owned } = tea;\n  const setSelected = () =>\n    setParams({\n      detail: slug,\n    });\n\n  const imageUrl = tea.images[subject];\n  const size = IMAGE_SIZE;\n\n  const isSelected = detailSlug === slug;\n  const classes = `TeaCard ${isSelected ? \"selected\" : \"\"} ${\n    owned ? \"owned\" : \"\"\n  }`;\n\n  return (\n    <figure className={classes} onClick={setSelected} id={slug}>\n      <div className=\"content\">\n        <div className=\"icon\"></div>\n        <h3 className=\"year glow\">{year}</h3>\n        <h2 className=\"name\">{name}</h2>\n        <Image\n          src={getImageUrl(imageUrl || \"\", size)}\n          alt={name}\n          width={size}\n          height={size}\n        />\n      </div>\n    </figure>\n  );\n};\n","import { Stats } from \"components/Stats\";\nimport { Card } from \"components/TeaProduct/Card\";\nimport { useParams } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\nimport { teasState } from \"states/teas\";\nimport { ImageSubject } from \"types/TeaProduct\";\nimport \"./Cards.scss\";\n\nexport const Cards = () => {\n  const { subject } = useParams();\n  const teas = useRecoilValue(teasState);\n\n  const $Teas = teas.map((tea) => (\n    <Card\n      key={tea.slug}\n      tea={tea}\n      subject={(subject as ImageSubject) || \"wrapperTop\"}\n    />\n  ));\n  return (\n    <>\n      <Stats />\n      <section className=\"TeaCards\">{$Teas}</section>\n    </>\n  );\n};\n\nexport default Cards;\n"],"sourceRoot":""}