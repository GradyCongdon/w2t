{"version":3,"sources":["components/TeaProduct/Slice.tsx","routes/Slices.tsx"],"names":["Slice","tea","subject","useSearchParams","params","setParams","detailSlug","get","year","name","slug","imageUrl","images","size","IMAGE_SIZE","classes","className","onClick","detail","id","src","getImageUrl","alt","width","height","loading","Slices","teas","useRecoilValue","teasState","useParams","defaultFilters","getDefaultFilters","useState","filteredSizes","setFilteredSizes","useEffect","Filters","Object","keys","map","toggle","TeaSlices","filter","t","cake","brick","mini","bamboo","unknown"],"mappings":"wUAUaA,EAAQ,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,IAAKC,EAA6B,EAA7BA,QAC3B,EAA4BC,cAA5B,mBAAOC,EAAP,KAAeC,EAAf,KACMC,EAAaF,EAAOG,IAAI,UAEtBC,EAAqBP,EAArBO,KAAMC,EAAeR,EAAfQ,KAAMC,EAAST,EAATS,KAMdC,EAAWV,EAAIW,OAAOV,GACtBW,EAAOC,IAGPC,EAAO,0BADMT,IAAeI,EAEnB,WAAa,GADf,YAETR,EAFS,YAEEW,GAEf,OACE,uBAAMG,UAAWD,EAASE,QAdR,kBAClBZ,EAAU,CACRa,OAAQR,KAYsCS,GAAIT,EAApD,UACGC,GACC,qBACES,IAAKC,YAAYV,EAAUE,GAC3BS,IAAKb,EACLc,MAAOV,EACPW,OAAQX,EACRG,UAAU,WACVS,QAAQ,SAGZ,qBAAKT,UAAU,sBAAf,SACE,sBAAKA,UAAU,oBAAf,UACE,+BAAOR,IACP,+BAAOC,aCnCJiB,G,OAAS,WACpB,IAAMC,EAAOC,YAAeC,KAEtB3B,EADS4B,cACQ5B,QAEjB6B,EAAiBC,EAAkB9B,GACzC,EAA0C+B,mBAASF,GAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KAEAC,qBAAU,WACRD,EAAiBH,EAAkB9B,MAClC,CAACA,IAEJ,IAKMmC,EAAUC,OAAOC,KAAKR,GAAgBS,KAAI,SAAC3B,GAAD,OAC9C,wBAEEG,UAAS,wBAAmBkB,EAAcrB,GAAQ,UAAY,IAC9DI,QAAS,kBAAMkB,EATJ,SAACtB,GAAD,mBAAC,eACXqB,GADU,kBAEZrB,GAAQqB,EAAcrB,KAOW4B,CAAO5B,KAHzC,SAKGA,GAJIA,MAQH6B,EAAYf,EACfgB,QAAO,SAACC,GAAD,OAAOV,EAAcU,EAAE/B,SAC9B2B,KAAI,SAACI,GAAD,OAAO,cAAC,EAAD,CAAoB3C,IAAK2C,EAAG1C,QAASA,GAAzB0C,EAAElC,SAE5B,OACE,qCACE,qBAAKM,UAAU,kBAAf,SAAkCqB,IAClC,qBAAKrB,UAAU,YAAf,SAA4B0B,SAKrBV,EAAoB,SAAC9B,GAAD,MAC9B,CACC2C,MAAM,EACNC,OAAO,EACPC,KAAkB,eAAZ7C,EACN8C,OAAoB,eAAZ9C,EACR+C,QAAqB,SAAZ/C,IAKEwB","file":"static/js/6.639da271.chunk.js","sourcesContent":["import { useSearchParams } from \"react-router-dom\";\nimport { IMAGE_SIZE } from \"types/const\";\nimport { getImageUrl, ImageSubject, TeaProduct } from \"types/TeaProduct\";\nimport \"./Slice.scss\";\n\ninterface TeaSliceProps {\n  tea: TeaProduct;\n  subject: ImageSubject;\n}\n\nexport const Slice = ({ tea, subject }: TeaSliceProps) => {\n  const [params, setParams] = useSearchParams();\n  const detailSlug = params.get(\"detail\");\n\n  const { year, name, slug } = tea;\n  const setSelected = () =>\n    setParams({\n      detail: slug,\n    });\n\n  const imageUrl = tea.images[subject];\n  const size = IMAGE_SIZE;\n\n  const isSelected = detailSlug === slug;\n  const classes = `TeaSliceWrapper ${\n    isSelected ? \"selected\" : \"\"\n  } ${subject} ${size}`;\n\n  return (\n    <span className={classes} onClick={setSelected} id={slug}>\n      {imageUrl && (\n        <img\n          src={getImageUrl(imageUrl, size)}\n          alt={name}\n          width={size}\n          height={size}\n          className=\"TeaSlice\"\n          loading=\"lazy\"\n        />\n      )}\n      <div className=\"TeaSliceInfoWrapper\">\n        <div className=\"TeaSliceInfo glow\">\n          <span>{year}</span>\n          <span>{name}</span>\n        </div>\n      </div>\n    </span>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\nimport { teasState } from \"states/teas\";\nimport { ImageSubject } from \"types/TeaProduct\";\nimport { Slice } from \"components/TeaProduct/Slice\";\nimport \"./Slices.scss\";\n\nexport const Slices = () => {\n  const teas = useRecoilValue(teasState);\n  const params = useParams();\n  const subject = params.subject as ImageSubject;\n\n  const defaultFilters = getDefaultFilters(subject);\n  const [filteredSizes, setFilteredSizes] = useState(defaultFilters);\n\n  useEffect(() => {\n    setFilteredSizes(getDefaultFilters(subject));\n  }, [subject]);\n\n  const toggle = (size: any) => ({\n    ...filteredSizes,\n    [size]: !filteredSizes[size] as boolean,\n  });\n\n  const Filters = Object.keys(defaultFilters).map((size) => (\n    <button\n      key={size}\n      className={`button toggle ${filteredSizes[size] ? \"checked\" : \"\"}`}\n      onClick={() => setFilteredSizes(toggle(size))}\n    >\n      {size}\n    </button>\n  ));\n\n  const TeaSlices = teas\n    .filter((t) => filteredSizes[t.size])\n    .map((t) => <Slice key={t.slug} tea={t} subject={subject} />);\n\n  return (\n    <>\n      <nav className=\"TeaSliceFilters\">{Filters}</nav>\n      <div className=\"TeaSlices\">{TeaSlices}</div>\n    </>\n  );\n};\n\nexport const getDefaultFilters = (subject: ImageSubject) =>\n  ({\n    cake: true,\n    brick: true,\n    mini: subject === \"wrapperTop\" ? false : true,\n    bamboo: subject === \"wrapperTop\" ? false : true,\n    unknown: subject === \"soup\" ? true : false,\n    // brick: subject === \"wrapperTop\" ? false : true,\n    // mini: subject === \"wrapperTop\" ? false : true,\n  } as any);\n\nexport default Slices;\n"],"sourceRoot":""}