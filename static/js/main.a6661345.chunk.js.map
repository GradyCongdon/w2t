{"version":3,"sources":["states/teas.ts","states/teaStyleFiltering.ts","states/sorting.ts","types/TeaProduct.ts","types/const.ts","components/TeaProduct/Image.tsx","utils/scrollTo.ts","App.tsx","utils/scrollTop.ts","states/layout.ts","utils/capitalize.ts","components/Selectors/Layout.tsx","components/Selectors/Filtering.tsx","components/Selectors/Sorting.tsx","components/Toggle.tsx","states/whiteBalanced.ts","components/Selectors/Subject.tsx","components/Divider.tsx","components/Heading.tsx","components/Nav.tsx","components/Detail/Description.tsx","components/Detail/LinkButton.tsx","components/Detail/Form.tsx","components/Detail/Table.tsx","components/Detail/Lines.tsx","components/Detail/Detail.tsx","utils/formatNumber.ts","routes/DetailDrawer.tsx","states/selectedSlug.ts","hooks/useKeyboardNavigation.tsx","components/TeaProduct/Card.tsx","routes/Cards.tsx","components/TeaProduct/ListRow.tsx","routes/List.tsx","components/TeaProduct/Slice.tsx","routes/Slices.tsx","utils/reportWebVitals.ts","index.tsx"],"names":["allTeasState","atom","key","default","teaProducts","teasState","selector","get","all","filtering","teaStyleFilteringState","sorting","sortingState","filter","filteringFunctions","sort","sortingFunctions","isStyle","s","x","style","raw","ripe","white","black","oolong","bamboo","t","size","heicha","description","includes","huigan","smokey","blend","yiwu","menghai","quantity","sortings","getName","name","replace","nameAsc","a","b","localeCompare","year","maxDPG","Math","max","forms","map","dpg","getImageUrl","url","IMAGE_SIZE","Image","src","alt","width","height","className","scrollToId","id","delay","setTimeout","elem","document","getElementById","scrollIntoView","behavior","block","window","scrollTo","top","left","process","console","log","App","useRecoilValue","teas","useSearchParams","params","location","useLocation","detail","useEffect","state","json","JSON","stringify","localStorage","setItem","scrollTop","pathname","useKeyboardNavigation","path","element","Main","index","to","offset","layouts","capitalize","str","toUpperCase","slice","toLowerCase","Selector","layout","subject","useParams","newLocation","search","LayoutSelector","l","Button","useRecoilState","currentFitlering","set","disabled","onClick","FilteringSelector","$Buttons","Object","keys","Label","value","icon","getIcon","currentSorting","setSorting","SortingSelector","props","Toggle","label","classes","whiteBalancedState","WhiteBalance","isWhiteBalanced","setIsWhiteBalanced","currentSubject","newSubjectLocation","SubjectSelector","Divider","Heading","children","Nav","Description","lines","target","source","regex","RegExp","glowTitle","replaceWithGlowHtml","glowText","split","html","shift","join","dangerouslySetInnerHTML","__html","LinkButton","href","PriceTable","first","second","third","FormPricesTable","form","inStock","price","_name","mass","parseInt","tilde","startsWith","nan","Number","isNaN","getMassName","$price","toFixed","$ppg","textDecoration","color","TableHeading","headings","h","scale","Line","percentile","number","floor","scaleIndex","padStart","border","LineTable","Lines","teaStyle","length","percentiles","typeSize","Detail","tea","imageUrl","images","wrapperTop","thumbnailUrl","fullName","Intl","NumberFormat","format","f","i","Drawer","DetailDrawer","allTeas","setParams","detailSlug","find","slug","selectedSlugState","getDirection","direction","findIndex","selectedSlug","setSelectedSlug","useHotkeys","Card","Cards","$Teas","ListRow","List","Slice","loading","Slices","defaultFilters","getDefaultFilters","useState","filteredSizes","setFilteredSizes","Filters","toggle","TeaSlices","cake","brick","mini","unknown","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","basename"],"mappings":"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","file":"static/js/main.a6661345.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\nimport { TeaProduct } from \"types/TeaProduct\";\n\nimport teaProducts from \"teaProducts.json\";\nimport {\n  filteringFunctions,\n  teaStyleFilteringState,\n} from \"./teaStyleFiltering\";\nimport { sortingFunctions, sortingState } from \"./sorting\";\n// const stored = JSON.parse(localStorage.getItem(\"subjects\") || \"\");\n\nexport const allTeasState = atom({\n  key: \"allTeas\",\n  default: teaProducts as TeaProduct[],\n});\n\nexport const teasState = selector({\n  key: \"teas\",\n  get: ({ get }) => {\n    const all = get(allTeasState);\n    const filtering = get(teaStyleFilteringState);\n    const sorting = get(sortingState);\n\n    return (\n      all\n        // @ts-expect-error: dynamic\n        .filter(filteringFunctions[filtering])\n        .sort(sortingFunctions[sorting])\n    );\n  },\n});\n","import { atom } from \"recoil\";\nimport { TeaProduct, Style } from \"types/TeaProduct\";\n\nexport type TeaStyleFiltering =\n  | \"all\"\n  | Style\n  | \"bamboo\"\n  | \"heicha\"\n  | \"sun dried\"\n  | \"shade dried\"\n  | \"smokey\"\n  | \"huigan\"\n  | \"blend\"\n  | \"yiwu\"\n  | \"menghai\"\n  | \"low stock\"\n  | \"rle low stock\";\n\nexport const teaStyleFilteringState = atom({\n  key: \"teaStyleFilter\",\n  default: \"all\" as TeaStyleFiltering,\n});\n\nconst isStyle = (s: TeaStyleFiltering) => (x: TeaProduct) => x.style === s;\nconst identity = (x: TeaProduct) => true;\n\ntype TeaStyleFilteringMap = {\n  // TODO make non-optional\n  [key in TeaStyleFiltering]?: (a: TeaProduct) => boolean;\n};\n\nexport const filteringFunctions: TeaStyleFilteringMap = {\n  all: identity,\n  raw: isStyle(\"raw\"),\n  ripe: isStyle(\"ripe\"),\n  white: isStyle(\"white\"),\n  black: isStyle(\"black\"),\n  oolong: isStyle(\"oolong\"),\n  bamboo: (t: TeaProduct) => t.size === \"bamboo\",\n  heicha: (t: TeaProduct) => t.description.includes(\"heicha\"),\n  \"sun dried\": (t: TeaProduct) => t.description.includes(\"sun dried\"),\n  \"shade dried\": (t: TeaProduct) => t.description.includes(\"shade dried\"),\n  huigan: (t: TeaProduct) => t.description.includes(\"huigan\"),\n  smokey: (t: TeaProduct) => t.description.includes(\"smoke\"),\n  blend: (t: TeaProduct) => t.description.includes(\"blend\"),\n  yiwu: (t: TeaProduct) => t.description.includes(\"Yiwu\"),\n  menghai: (t: TeaProduct) => t.description.includes(\"Menghai\"),\n  \"low stock\": (t: TeaProduct) => t.quantity < 100 && t.quantity > 0,\n  \"rle low stock\": (t: TeaProduct) => t.quantity < 20 && t.quantity > 0,\n  // TODO add data, then re-enable\n  // 'green': isStyle(TeaStyle.Green),\n  // 'unknown': isStyle(TeaStyle.Unknown),\n};\n","import { atom } from \"recoil\";\nimport { TeaProduct } from \"types/TeaProduct\";\n\nexport type Sorting = \"-year\" | \"+year\" | \"+name\" | \"-name\" | \"+cost\" | \"-cost\";\nexport const sortings: Sorting[] = [\n  \"-year\",\n  \"+year\",\n  \"-name\",\n  \"+name\",\n  \"-cost\",\n  \"+cost\",\n];\n\nexport const sortingState = atom({\n  key: \"sorting\",\n  default: \"-year\" as Sorting,\n});\n\nconst getName = (x: TeaProduct) => x.name.replace(\"The \", \"\");\n\nconst nameDesc = (a: TeaProduct, b: TeaProduct) =>\n  getName(b).localeCompare(getName(a)) || b.year - a.year;\nconst nameAsc = (a: TeaProduct, b: TeaProduct) =>\n  getName(a).localeCompare(getName(b)) || a.year - b.year;\n\nconst yearDesc = (a: TeaProduct, b: TeaProduct) =>\n  b.year - a.year || nameAsc(a, b);\nconst yearAsc = (a: TeaProduct, b: TeaProduct) =>\n  a.year - b.year || nameAsc(a, b);\n\nconst maxDPG = (x: TeaProduct): number =>\n  Math.max(...x.forms.map((x) => x.dpg));\n\nconst costDesc = (a: TeaProduct, b: TeaProduct) =>\n  maxDPG(b) - maxDPG(a) || nameAsc(a, b);\nconst costAsc = (a: TeaProduct, b: TeaProduct) =>\n  maxDPG(a) - maxDPG(b) || nameAsc(a, b);\n\ntype SortingFunctionMap = {\n  [key in Sorting]: (a: TeaProduct, b: TeaProduct) => number;\n};\n\nexport const sortingFunctions: SortingFunctionMap = {\n  \"-year\": yearDesc,\n  \"+year\": yearAsc,\n  \"-name\": nameDesc,\n  \"+name\": nameAsc,\n  \"-cost\": costDesc,\n  \"+cost\": costAsc,\n};\n","export type Style =\n  | \"white\"\n  | \"green\"\n  | \"black\"\n  | \"hongcha\"\n  | \"raw\"\n  | \"ripe\"\n  | \"oolong\"\n  | \"huangpian\"\n  | \"unknown\";\n\nexport type Size =\n  | \"cake\"\n  | \"mini\"\n  | \"bamboo\"\n  | \"square\"\n  | \"brick\"\n  | \"ball\"\n  | \"sample\"\n  | \"unknown\";\n\nexport type ImageSubject =\n  | \"leaf\"\n  | \"soup\"\n  | \"teaBottom\"\n  | \"teaDetail\"\n  | \"teaTop\"\n  | \"tong\"\n  | \"chabu\"\n  | \"shirt\"\n  | \"wrapperBottom\"\n  | \"wrapperDetail\"\n  | \"wrapperTop\";\n\nexport const getImageUrl = (url: string, size: number): string =>\n  url.replace(\"SIZEx\", `${size}x`);\n\nexport type Images = Partial<Record<ImageSubject, string>>;\n\nexport interface Percentile {\n  size: number;\n  type: number;\n  typeSize: number;\n  all: number;\n  dpg: number;\n}\n\nexport interface Form {\n  name: string;\n  price: number;\n  inStock: boolean;\n  grams: number;\n  dpg: number;\n  size: Size;\n  percentiles: Percentile;\n}\n\n// export enum FormName {\n//   Name7G = \"7g\",\n//   The100G = \"100g\",\n//   The10G = \"10g\",\n//   The120G = \"120g\",\n//   The1Kg = \"1kg\",\n//   The200G = \"200g\",\n//   The250G = \"250g\",\n//   The250GBrickTuoCake = \"250g Brick/Tuo/Cake\",\n//   The25G = \"25g\",\n//   The25GSample = \"25g Sample\",\n//   The357G = \"357g\",\n//   The357GCake = \"357g Cake\",\n//   The360G = \"360g\",\n//   The49G = \"~49g\",\n//   The49GStack = \"49g Stack\",\n//   The50G = \"~50g\",\n//   The7G = \"~7g\",\n//   The7GMini = \"7g Mini\",\n//   The80G = \"80g\",\n// }\n\nexport interface TeaProduct {\n  slug: string;\n  name: string;\n  year: number;\n  quantity: number;\n  description: string;\n  url: string;\n  thumbnailUrl: string;\n  version: string;\n  style: Style;\n  size: Size;\n  images: Images;\n  forms: Form[];\n  tags: string[];\n}\n","export const IMAGE_SIZE = 420;\n","import \"./Image.scss\";\n\ninterface Props {\n  src: string;\n  alt: string;\n  width: number | string;\n  height: number | string;\n}\nexport const Image = ({ src, alt, width, height }: Props) => {\n  if (!src) {\n    return (\n      <div className=\"TeaImage placeholder responsive\">\n        <div className=\"circle\"></div>\n      </div>\n    );\n  }\n  return (\n    <img\n      src={src}\n      alt={alt}\n      width={width}\n      height={height}\n      className=\"TeaImage responsive\"\n    />\n  );\n};\n","export const scrollToId = (id: string, delay = 100) =>\n  setTimeout(() => {\n    const elem = document.getElementById(id);\n    if (elem) elem.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n    else\n      window.scrollTo({\n        top: 0,\n        left: 0,\n        behavior: \"smooth\",\n      });\n  }, delay);\n","import { Nav } from \"components/Nav\";\nimport { DetailDrawer } from \"routes/DetailDrawer\";\nimport { useEffect } from \"react\";\nimport { useRecoilValue } from \"recoil\";\nimport { sortingState } from \"states/sorting\";\nimport { teaStyleFilteringState } from \"states/teaStyleFiltering\";\n\nimport \"./App.scss\";\nimport { useKeyboardNavigation } from \"hooks/useKeyboardNavigation\";\nimport {\n  Routes,\n  Route,\n  Navigate,\n  useSearchParams,\n  Outlet,\n  useLocation,\n} from \"react-router-dom\";\nimport { Cards } from \"routes/Cards\";\nimport { List } from \"routes/List\";\nimport { Slices } from \"routes/Slices\";\nimport { teasState } from \"states/teas\";\nimport { scrollToId } from \"utils/scrollTo\";\nimport { scrollTop } from \"utils/scrollTop\";\n\nprocess && console.log(`msg: ${process.env.REACT_APP_GIT_MSG || \"dev\"}`);\n\nfunction App() {\n  const sorting = useRecoilValue(sortingState);\n  const filtering = useRecoilValue(teaStyleFilteringState);\n  const teas = useRecoilValue(teasState);\n  const [params] = useSearchParams();\n  const location = useLocation();\n\n  const detail = params.get(\"detail\") || \"\";\n\n  useEffect(() => {\n    const state = {\n      sorting,\n      filtering,\n    };\n    const json = JSON.stringify(state);\n    localStorage.setItem(\"state\", json);\n  }, [sorting, filtering]);\n\n  useEffect(() => {\n    scrollTop(\"drawer\");\n    scrollToId(detail, 80);\n  }, [sorting, filtering, detail, location.pathname]);\n\n  useKeyboardNavigation(teas);\n\n  return (\n    <div className=\"app\">\n      <Routes>\n        <Route path=\"/\" element={<Main />}>\n          <Route path=\"cards/:subject\" element={<Cards />} />\n          <Route path=\"slices/:subject\" element={<Slices />} />\n          <Route path=\"list/:subject\" element={<List />} />\n          <Route index element={<Navigate to=\"/cards/wrapperTop\" />} />\n          <Route path=\"*\" element={<Navigate to=\"cards/wrapperTop\" />} />\n        </Route>\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n\nconst Main = () => {\n  const [params] = useSearchParams();\n  const detail = params.get(\"detail\") || \"\";\n  return (\n    <>\n      <Nav />\n      <main id=\"main\" className={detail ? \"detail--open\" : \"\"}>\n        <Outlet />\n      </main>\n      <DetailDrawer />\n    </>\n  );\n};\n","export const scrollTop = (id: string, offset = 0) =>\n  setTimeout(() => {\n    const elem = document.getElementById(id);\n    if (elem) elem.scrollTop = offset;\n  }, 32);\n","import { atom } from \"recoil\";\n\nexport type Layout = \"cards\" | \"list\" | \"slices\";\n\nexport const layouts: Layout[] = [\"cards\", \"slices\", \"list\"];\n\nexport const layoutState = atom({\n  key: \"layout\",\n  default: \"cards\" as Layout,\n});\n","export const capitalize = (str: string) => str[0].toUpperCase() + str.slice(1).toLowerCase();","import { NavLink, useLocation, useParams } from \"react-router-dom\";\nimport { Layout, layouts } from \"states/layout\";\nimport { capitalize } from \"utils/capitalize\";\n\nexport const Selector = ({ layout }: { layout: Layout }) => {\n  const { subject } = useParams();\n  const location = useLocation();\n\n  const newLocation = {\n    pathname: `${layout}/${subject}`,\n    search: location.search,\n  };\n  return (\n    <NavLink className=\"button radio button--layout\" to={newLocation}>\n      <span className=\"label\">{capitalize(layout)}</span>\n    </NavLink>\n  );\n};\n\nexport const LayoutSelector = () => (\n  <>\n    {layouts.map((l) => (\n      <Selector key={l} layout={l} />\n    ))}\n  </>\n);\n","import { useRecoilState } from \"recoil\";\nimport {\n  filteringFunctions,\n  TeaStyleFiltering,\n  teaStyleFilteringState,\n} from \"states/teaStyleFiltering\";\n\nexport const Button = ({ filtering }: { filtering: TeaStyleFiltering }) => {\n  const [currentFitlering, set] = useRecoilState(teaStyleFilteringState);\n  return (\n    <button\n      className=\"button radio button--filter\"\n      disabled={filtering === currentFitlering}\n      onClick={() => set(filtering)}\n    >\n      {filtering}\n    </button>\n  );\n};\n\nexport const FilteringSelector = () => {\n  const $Buttons = Object.keys(filteringFunctions).map((key) => (\n    <Button filtering={key as TeaStyleFiltering} key={key} />\n  ));\n  return <>{$Buttons}</>;\n};\n","import { useRecoilState } from \"recoil\";\nimport { Sorting, sortings, sortingState } from \"states/sorting\";\n\nconst getIcon = (value: string) => {\n  switch (value[0]) {\n    case \"+\": {\n      // return '⬈';\n      return \"+\";\n    }\n    case \"-\": {\n      // return '⬊';\n      return \"-\";\n    }\n    default: {\n      return \"?\";\n    }\n  }\n};\n\nconst Label = ({ value }: any) => {\n  const icon = getIcon(value);\n  return (\n    <span className=\"label\">\n      <span className=\"text\">{value.slice(1)}</span>\n      &nbsp;\n      <span className=\"icon--plain\">{icon}</span>\n    </span>\n  );\n};\n\nexport const Button = ({ sorting }: { sorting: Sorting }) => {\n  const [currentSorting, setSorting] = useRecoilState(sortingState);\n  return (\n    <button\n      className=\"button radio button--sort\"\n      disabled={sorting === currentSorting}\n      onClick={() => setSorting(sorting)}\n    >\n      <Label value={sorting} />\n    </button>\n  );\n};\n\nexport const SortingSelector = (props: any) => {\n  const $Buttons = sortings.map((s) => <Button sorting={s} key={s} />);\n  return <>{$Buttons}</>;\n};\n","import { Dispatch, SetStateAction } from \"react\";\n\ninterface ToggleProps {\n  value: boolean;\n  set: Dispatch<SetStateAction<boolean>>;\n  label: string;\n  classes?: string;\n}\n\nexport const Toggle = ({ value, label, set, classes = '' }: ToggleProps) => (\n  <button\n    className={`button toggle ${value ? 'checked' : ''} ${classes}`}\n    onClick={() => set(!value)}\n  >\n    {label}\n  </button>\n);\n","import { atom } from 'recoil';\n\nexport const whiteBalancedState = atom({\n  key: 'whiteBalanced',\n  default: true,\n});\n","import { NavLink, useLocation, useParams } from \"react-router-dom\";\nimport { useRecoilState } from \"recoil\";\nimport { Toggle } from \"components/Toggle\";\nimport { whiteBalancedState } from \"states/whiteBalanced\";\nimport { ImageSubject } from \"types/TeaProduct\";\nimport { capitalize } from \"utils/capitalize\";\nimport \"./Subject.scss\";\n\nconst WhiteBalance = () => {\n  const [isWhiteBalanced, setIsWhiteBalanced] =\n    useRecoilState(whiteBalancedState);\n  return (\n    <Toggle\n      value={isWhiteBalanced}\n      set={setIsWhiteBalanced}\n      label=\"wb\"\n      classes=\"WhiteBalance\"\n    />\n  );\n};\n\nconst label = (subject: ImageSubject) => capitalize(subject[0]);\n\nconst Button = ({ subject }: { subject: ImageSubject }) => {\n  const { subject: currentSubject } = useParams();\n  const location = useLocation();\n\n  const newSubjectLocation = currentSubject\n    ? {\n        pathname: location.pathname.replace(currentSubject, subject),\n        search: location.search,\n      }\n    : \"/\";\n  return (\n    <NavLink\n      className={`button radio button--subject `}\n      to={newSubjectLocation}\n      // disabled={currentSubject === subject}\n    >\n      {label(subject)}\n    </NavLink>\n  );\n};\n\nexport const SubjectSelector = () => {\n  const { subject: currentSubject } = useParams();\n  return (\n    <nav className={`subject-selector global`}>\n      <Button subject=\"wrapperTop\" />\n      <Button subject=\"teaTop\" />\n      <div className={`subject--white-balanced ${currentSubject}`}>\n        <WhiteBalance />\n        <Button subject=\"soup\" />\n      </div>\n    </nav>\n  );\n};\n","export const Divider = () => (\n  <>\n    <br />\n    <br />\n  </>\n);\n","export const Heading = ({ children }: any) => (\n  <h1 className=\"heading\" onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}>{children}</h1>\n);\n","import { LayoutSelector } from \"components/Selectors/Layout\";\nimport { FilteringSelector } from \"components/Selectors/Filtering\";\nimport { SortingSelector } from \"components/Selectors/Sorting\";\nimport { SubjectSelector } from \"components/Selectors/Subject\";\nimport { Divider } from \"components/Divider\";\nimport { Heading } from \"components/Heading\";\n\nexport const Nav = () => (\n  <aside className=\"controls--global\">\n    <Heading>w2tv</Heading>\n    <SubjectSelector />\n    <LayoutSelector />\n    <Divider />\n    <SortingSelector />\n    <Divider />\n    <FilteringSelector />\n    <Divider />\n  </aside>\n);\n","export function replaceWithGlowHtml(target: string, source: string) {\n  const regex = new RegExp(target, \"g\");\n  const glowTitle = `<span class=\"glow\">${target}</span>`;\n  const descriptionGlow = source.replace(regex, glowTitle);\n  return descriptionGlow;\n}\ntype Props = {\n  description: string;\n  glowText: string;\n};\n\nexport const Description = ({ description, glowText }: Props) => {\n  const descriptionGlow = replaceWithGlowHtml(glowText, description);\n  const lines = descriptionGlow.split(\".\");\n  const html = `\n<p>\n  ${lines.shift()}.\n</p>\n<p>\n  ${lines.join(\". \")}\n</p>\n  `;\n  return (\n    <div className=\"description\" dangerouslySetInnerHTML={{ __html: html }} />\n  );\n};\n","export const LinkButton = ({ url }: { url: string }) => {\n  return (\n    <a className=\"DetailButton Link\" href={url}>\n      <span className=\"value\">🔗</span>\n    </a>\n  );\n};\n","import * as TeaProduct from \"types/TeaProduct\";\nimport \"./Table.scss\";\nimport \"./Form.scss\";\n\nconst PriceTable = ({ style, first, second, third }: any) => (\n  <div style={style} className=\"Table table\">\n    <h2>{first}</h2>\n    <h3>{second}</h3>\n    <h4>{third}</h4>\n  </div>\n);\n\ntype Props = {\n  form: TeaProduct.Form;\n  style: string;\n  index: number;\n};\n\nexport const FormPricesTable = ({ form, style: teaStyle, index }: Props) => {\n  const { inStock, price } = form;\n\n  var { nan, mass, name } = getMassName(form);\n  const $price = \"$\" + price.toFixed(2);\n  const $ppg = nan ? \"$?\" : \"$\" + (price / mass).toFixed(2);\n\n  const style = {\n    textDecoration: inStock ? \"none\" : \"line-through\",\n    color: inStock ? \"inherit\" : \"var(--grey-medium)\",\n  };\n\n  return (\n    <div className=\"FormPricesTable\">\n      <PriceTable style={style} first={name} second={$price} third={$ppg} />\n    </div>\n  );\n};\n\nexport const FormPercentileTable = ({ form }: Props) => {\n  const { inStock, percentiles } = form;\n\n  const style = {\n    textDecoration: inStock ? \"none\" : \"line-through\",\n    color: inStock ? \"inherit\" : \"var(--grey-medium)\",\n  };\n  const all = getNumberWithOrdinal(percentiles.all);\n  const dpg = getNumberWithOrdinal(percentiles.dpg);\n\n  return (\n    <div style={style} className=\"Percentile table table--fit\">\n      <h5>percentile</h5>\n      <h3>\n        {all.number}\n        <sup>{all.ordinal}</sup>\n      </h3>\n      <h3>\n        {dpg.number}\n        <sup>{dpg.ordinal}</sup>\n      </h3>\n    </div>\n  );\n};\n\nfunction getMassName(form: TeaProduct.Form) {\n  const { name: _name } = form;\n  let mass = parseInt(_name.replace(/\\D/g, \"\"), 10);\n  if (mass === 1) mass = 1000;\n  const tilde = _name.startsWith(\"~\") ? \"~\" : \"\";\n  const nan = Number.isNaN(mass);\n  const name = nan ? \"?\" : `${tilde}${mass}g`;\n  return { nan, mass, name };\n}\n\nconst suffix = [\"th\", \"st\", \"nd\", \"rd\"];\nfunction getNumberWithOrdinal(_number: number) {\n  const number = Math.round(_number);\n  const v = number % 100;\n  const ordinal = suffix[(v - 20) % 10] || suffix[v] || suffix[0];\n  return {\n    number,\n    ordinal,\n  };\n}\n","import \"./Table.scss\";\n\ntype Props = {\n  headings: string[];\n};\n\nexport const TableHeading = ({ headings }: Props) => (\n  <div className=\"TableHeading table table--fit\">\n    {headings.map((h) => (\n      <span key={h}>{h}</span>\n    ))}\n  </div>\n);\n","import { Form, Style } from \"types/TeaProduct\";\nimport \"./Lines.scss\";\n\nconst scale = [\n  \"#ffe6cb\",\n  \"#ffe3af\",\n  \"#ffc58a\",\n  \"#ffa474\",\n  \"#fa8366\",\n  \"#ed635c\",\n  \"#db4551\",\n  \"#c52840\",\n  \"#aa0e27\",\n  \"#8b0000\",\n];\n\nexport const Line = ({ percentile }: { percentile: number }) => {\n  const number = Math.floor(percentile);\n  const scaleIndex = +number.toFixed(0).padStart(2, \"0\")[0];\n  const style = {\n    left: `${number * 2}px`,\n    border: `2px solid ${scale[scaleIndex]}`,\n    color: number <= 30 ? \"rgb(197, 134, 42)\" : scale[scaleIndex],\n  };\n  return (\n    <div className=\"Line\">\n      <span className=\"Label\" style={style}>\n        {number}\n      </span>\n    </div>\n  );\n};\n\nexport const LineTable = ({\n  label,\n  percentile,\n}: {\n  label: string;\n  percentile: number;\n}) => {\n  return (\n    <div className=\"Percentile table \">\n      <h5>{label}</h5>\n      <Line percentile={percentile} />\n    </div>\n  );\n};\n\nexport const Lines = ({\n  forms,\n  teaStyle,\n}: {\n  forms: Form[];\n  teaStyle: Style;\n}) => {\n  if (!forms.length) return null;\n  const { percentiles } = forms[0];\n  const { dpg, typeSize } = percentiles;\n  return (\n    <div className=\"Lines\">\n      <LineTable label={\"overall\"} percentile={dpg} />\n      <LineTable label={`${teaStyle}`} percentile={typeSize} />\n      <div className=\"LabelWrapper\">\n        <span className=\"LinesLabel\">cost percentile</span>\n      </div>\n    </div>\n  );\n};\n","import { getImageUrl, TeaProduct } from \"types/TeaProduct\";\nimport { Image } from \"components/TeaProduct/Image\";\nimport { Description } from \"./Description\";\nimport { LinkButton } from \"./LinkButton\";\nimport \"./Detail.scss\";\nimport { FormPricesTable } from \"./Form\";\nimport { IMAGE_SIZE } from \"types/const\";\nimport { TableHeading } from \"./Table\";\nimport { Lines } from \"./Lines\";\nimport { formatNumber } from \"utils/formatNumber\";\n\ntype Props = {\n  tea: TeaProduct;\n};\n\nexport const Detail = ({ tea }: Props) => {\n  const { year, name, description, url, forms, style, quantity } = tea;\n  const size = IMAGE_SIZE;\n  const imageUrl = getImageUrl(tea.images.wrapperTop || tea.thumbnailUrl, size);\n  const fullName = `${year} ${name}`;\n\n  return (\n    <article className=\"TeaDetail\">\n      <h1 className=\"title glow\">{fullName}</h1>\n      <Image src={imageUrl} alt={name} width={size} height={size} />\n      <p className=\"quantity\">{formatNumber(quantity)}</p>\n      {!forms.length ? null : (\n        <TableHeading headings={[\"Size\", \"Price\", \"$ / g\"]} />\n      )}\n      {forms.map((f, i) => (\n        <FormPricesTable key={f.name} index={i} form={f} style={style} />\n      ))}\n      <Lines forms={forms} teaStyle={style} />\n      <Description glowText={fullName} description={description} />\n      <LinkButton url={url} />\n    </article>\n  );\n};\n","export const formatNumber = (number: number) =>\n  new Intl.NumberFormat(\"en-us\").format(number);\n","import { Detail } from \"components/Detail/Detail\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\nimport { allTeasState } from \"states/teas\";\nimport { scrollToId } from \"utils/scrollTo\";\nimport \"./Detail.scss\";\n\n// const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms))\n\nexport const Error = ({ slug }: any) => {\n  return (\n    <>\n      <h1>error</h1>\n      <h1>{slug}</h1>\n    </>\n  );\n};\n\nexport const Skeleton = () => {\n  return <div className=\"skeleton\"></div>;\n};\nexport const Drawer = ({ classes, children }: any) => (\n  <aside className={classes} id=\"drawer\">\n    {children}\n  </aside>\n);\n\nexport const DetailDrawer = () => {\n  const allTeas = useRecoilValue(allTeasState);\n  const [params, setParams] = useSearchParams();\n  const detailSlug = params.get(\"detail\");\n  const classes = `drawer ${detailSlug ? \"open\" : \"closed\"}`;\n\n  if (!detailSlug) return <Drawer classes={classes} />;\n  const tea = allTeas.find((t) => t.slug === detailSlug);\n  if (!tea) return null;\n\n  const resetSelected = () => {\n    scrollToId(detailSlug);\n    setParams({});\n  };\n\n  return (\n    <Drawer classes={classes}>\n      <button className=\"DetailButton Close\" onClick={resetSelected}>\n        <span className=\"value\">&times;</span>\n      </button>\n      <Detail tea={tea} />\n    </Drawer>\n  );\n};\n","import { atom } from 'recoil';\n\nexport const selectedSlugState = atom({\n  key: 'selectedSlug',\n  default: '',\n});\n","import { useRecoilState } from \"recoil\";\nimport { selectedSlugState } from \"../states/selectedSlug\";\nimport { TeaProduct } from \"../types/TeaProduct\";\nimport { useHotkeys } from \"react-hotkeys-hook\";\n\nexport const getDirection = (\n  direction: string,\n  slug: string,\n  teas: TeaProduct[]\n): string => {\n  if (!slug) return teas[0].slug;\n  const i = teas.findIndex((t) => t.slug === slug);\n  const col = 3;\n  switch (direction) {\n    case \"left\":\n      return teas[i - 1]?.slug || teas[teas.length - 1].slug;\n    case \"right\":\n      return teas[i + 1]?.slug || teas[0].slug;\n    case \"up\":\n      return teas[i - col]?.slug || teas[teas.length - 1].slug;\n    case \"down\":\n      return teas[i + col]?.slug || teas[0].slug;\n    default:\n      return slug;\n  }\n};\n\nexport function useKeyboardNavigation(teas: TeaProduct[]) {\n  const [selectedSlug, setSelectedSlug] = useRecoilState(selectedSlugState);\n  useHotkeys(\n    \"left\",\n    () => setSelectedSlug(getDirection(\"left\", selectedSlug, teas)),\n    [selectedSlug, teas]\n  );\n  useHotkeys(\n    \"right\",\n    () => setSelectedSlug(getDirection(\"right\", selectedSlug, teas)),\n    [selectedSlug, teas]\n  );\n  useHotkeys(\n    \"up\",\n    () => setSelectedSlug(getDirection(\"up\", selectedSlug, teas)),\n    [selectedSlug, teas]\n  );\n  useHotkeys(\n    \"down\",\n    () => setSelectedSlug(getDirection(\"down\", selectedSlug, teas)),\n    [selectedSlug, teas]\n  );\n}\n","import { getImageUrl, ImageSubject, TeaProduct } from \"types/TeaProduct\";\nimport { Image } from \"./Image\";\nimport \"./Card.scss\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { IMAGE_SIZE } from \"types/const\";\n\nexport type Props = {\n  tea: TeaProduct;\n  subject: ImageSubject;\n};\n\nexport const Card = ({ tea, subject }: Props) => {\n  const [params, setParams] = useSearchParams();\n  const detailSlug = params.get(\"detail\");\n\n  const { year, name, slug } = tea;\n  const setSelected = () =>\n    setParams({\n      detail: slug,\n    });\n\n  const imageUrl = tea.images[subject];\n  const size = IMAGE_SIZE;\n\n  const isSelected = detailSlug === slug;\n  const classes = `TeaCard ${isSelected ? \"selected\" : \"\"}`;\n\n  return (\n    <figure className={classes} onClick={setSelected} id={slug}>\n      <div className=\"content\">\n        <div className=\"icon\"></div>\n        <h3 className=\"year glow\">{year}</h3>\n        <h2 className=\"name\">{name}</h2>\n        <Image\n          src={getImageUrl(imageUrl || \"\", size)}\n          alt={name}\n          width={size}\n          height={size}\n        />\n      </div>\n    </figure>\n  );\n};\n","import { Card } from \"components/TeaProduct/Card\";\nimport { useParams } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\nimport { teasState } from \"states/teas\";\nimport { ImageSubject } from \"types/TeaProduct\";\nimport \"./Cards.scss\";\n\nexport const Cards = () => {\n  const { subject } = useParams();\n  const teas = useRecoilValue(teasState);\n\n  const $Teas = teas.map((tea) => (\n    <Card\n      key={tea.slug}\n      tea={tea}\n      subject={(subject as ImageSubject) || \"wrapperTop\"}\n    />\n  ));\n  return <section className=\"TeaCards\">{$Teas}</section>;\n};\n","import { useSearchParams } from \"react-router-dom\";\nimport { TeaProduct } from \"types/TeaProduct\";\nimport \"./ListRow.scss\";\n\nexport const ListRow = ({ tea }: { tea: TeaProduct }) => {\n  const [params, setParams] = useSearchParams();\n\n  const { year, name, style, slug } = tea;\n  const detailSlug = params.get(\"detail\");\n\n  const setSelected = () =>\n    setParams({\n      detail: slug,\n    });\n\n  const isSelected = detailSlug === slug;\n  const classes = `ListText ${isSelected ? \"selected glow\" : \"\"}`;\n\n  return (\n    <tr className={classes} onClick={setSelected} id={slug}>\n      <td className=\"year\">{year} </td>\n      <td className=\"name\">{name} </td>\n      <td className=\"style\"> {style}</td>\n    </tr>\n  );\n};\n","import { useRecoilValue } from \"recoil\";\nimport { teasState } from \"states/teas\";\nimport { ListRow } from \"components/TeaProduct/ListRow\";\nimport \"./List.scss\";\n\nexport const List = () => {\n  const teas = useRecoilValue(teasState);\n\n  return (\n    <table className=\"List\">\n      <tbody>\n        {teas.map((t) => (\n          <ListRow key={t.slug} tea={t} />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { useSearchParams } from \"react-router-dom\";\nimport { IMAGE_SIZE } from \"types/const\";\nimport { getImageUrl, ImageSubject, TeaProduct } from \"types/TeaProduct\";\nimport \"./Slice.scss\";\n\ninterface TeaSliceProps {\n  tea: TeaProduct;\n  subject: ImageSubject;\n}\n\nexport const Slice = ({ tea, subject }: TeaSliceProps) => {\n  const [params, setParams] = useSearchParams();\n  const detailSlug = params.get(\"detail\");\n\n  const { year, name, slug } = tea;\n  const setSelected = () =>\n    setParams({\n      detail: slug,\n    });\n\n  const imageUrl = tea.images[subject];\n  const size = IMAGE_SIZE;\n\n  const isSelected = detailSlug === slug;\n  const classes = `TeaSliceWrapper ${\n    isSelected ? \"selected\" : \"\"\n  } ${subject} ${size}`;\n\n  return (\n    <span className={classes} onClick={setSelected} id={slug}>\n      {imageUrl && (\n        <img\n          src={getImageUrl(imageUrl, size)}\n          alt={name}\n          width={size}\n          height={size}\n          className=\"TeaSlice\"\n          loading=\"lazy\"\n        />\n      )}\n      <div className=\"TeaSliceInfoWrapper\">\n        <div className=\"TeaSliceInfo glow\">\n          <span>{year}</span>\n          <span>{name}</span>\n        </div>\n      </div>\n    </span>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useRecoilValue } from \"recoil\";\nimport { teasState } from \"states/teas\";\nimport { ImageSubject } from \"types/TeaProduct\";\nimport { Slice } from \"components/TeaProduct/Slice\";\nimport \"./Slices.scss\";\n\nexport const Slices = () => {\n  const teas = useRecoilValue(teasState);\n  const params = useParams();\n  const subject = params.subject as ImageSubject;\n\n  const defaultFilters = getDefaultFilters(subject);\n  const [filteredSizes, setFilteredSizes] = useState(defaultFilters);\n\n  useEffect(() => {\n    setFilteredSizes(getDefaultFilters(subject));\n  }, [subject]);\n\n  const toggle = (size: any) => ({\n    ...filteredSizes,\n    [size]: !filteredSizes[size] as boolean,\n  });\n\n  const Filters = Object.keys(defaultFilters).map((size) => (\n    <button\n      key={size}\n      className={`button toggle ${filteredSizes[size] ? \"checked\" : \"\"}`}\n      onClick={() => setFilteredSizes(toggle(size))}\n    >\n      {size}\n    </button>\n  ));\n\n  const TeaSlices = teas\n    .filter((t) => filteredSizes[t.size])\n    .map((t) => <Slice key={t.slug} tea={t} subject={subject} />);\n\n  return (\n    <>\n      <nav className=\"TeaSliceFilters\">{Filters}</nav>\n      <div className=\"TeaSlices\">{TeaSlices}</div>\n    </>\n  );\n};\n\nexport const getDefaultFilters = (subject: ImageSubject) =>\n  ({\n    cake: true,\n    brick: true,\n    mini: subject === \"wrapperTop\" ? false : true,\n    bamboo: subject === \"wrapperTop\" ? false : true,\n    unknown: subject === \"soup\" ? true : false,\n    // brick: subject === \"wrapperTop\" ? false : true,\n    // mini: subject === \"wrapperTop\" ? false : true,\n  } as any);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport App from \"./App\";\nimport \"./index.scss\";\nimport reportWebVitals from \"./utils/reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <BrowserRouter basename=\"/w2tv\">\n        <App />\n      </BrowserRouter>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}